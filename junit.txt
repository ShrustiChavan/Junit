1. package assignment;
   @FunctionalInterface
   interface SI{
	float operation(float p , float t , float r);
	
        }

    public class SimpleInterest {

	public static void main(String[] args) {
	
	    SI var1 = (p , t , r) -> (p * t * r ) / 100 ;
	    System.out.println("Simple interest = "+var1.operation(10000, 2, 1));  
	}
     }

2.

3.package Juint;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class BankAccountTest {

	@Test
	void test() {
		BankAccount acc1=new BankAccount(20000.00);
		
		assertThrows(InsufficientFundsException.class, ()->acc1.withDraw(21000.0));

	}

}
 package Juint;

import junit.framework.Test;

public class BankAccount {
	
	double accBanlance;
	
	
	
	public BankAccount(double accBanlance) {
		super();
		this.accBanlance = accBanlance;
	}

	
	void withDraw(double withDrawAmt) throws InsufficientFundsException {
		
		if(withDrawAmt>accBanlance)
			throw new InsufficientFundsException("InsufficientFundsException");
		
		accBanlance=accBanlance-withDrawAmt;
		
		System.out.println("Amount WithDrawn: "+withDrawAmt);
		System.out.println("Available Balance: "+accBanlance);
	}
	
	public static void main(String[] args) {
		
		BankAccount acc1=new BankAccount(20000.00);

		try {
			acc1.withDraw(20000.00);
		} catch (InsufficientFundsException e) {
		
			e.printStackTrace();
		}
		
	}

}

public class InsufficientFundsException extends Exception {
	
	public InsufficientFundsException(String msg) {
		super(msg);
	}

}
 

4.package com.junit.Assignment;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TestCases {
	 Calculator cal;
	 
	 @BeforeAll
	 static void SetupAll(){
		 System.out.println("@BeforAll Method");
		 
	 }
	 @BeforeEach
	void setup() {
		cal=new Calculator();
		System.out.println("@BeforeEach Method");
	}
	
	@Test
	void test() {
		
		int expected=5;
		int actual=cal.add(2, 3);
		assertEquals(expected, actual);
		System.out.println(actual);
	}
	@Test
	void test2() {
		int expected=8;
		int actual=cal.add(4, 4);
		assertEquals(expected, actual);
		System.out.println(actual);

	}
	
	@AfterEach
	void setup2() {
		System.out.println("@AfteEach Method");
	}
	 
	 @AfterAll
	 static void SetupAll2(){
		 System.out.println("@AfterAll Method");
		 
	 }
	

}
package com.junit.Assignment;

public class Calculator {
	 
	public int add(int a, int b) {
		return a+b;
	}

}
